// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.PoC.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SecondScenarioFeature : object, Xunit.IClassFixture<SecondScenarioFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SecondScenario.feature"
#line hidden
        
        public SecondScenarioFeature(SecondScenarioFeature.FixtureData fixtureData, SpecFlow_PoC_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "SecondScenario", "\tSimple calculator for adding two numbers", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add two numbers")]
        [Xunit.TraitAttribute("FeatureTitle", "SecondScenario")]
        [Xunit.TraitAttribute("Description", "Add two numbers")]
        [Xunit.TraitAttribute("Category", "some-domain")]
        public void AddTwoNumbers()
        {
            string[] tagsOfScenario = new string[] {
                    "some-domain"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add two numbers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "productId",
                            "name",
                            "description",
                            "price",
                            "stock"});
                table1.AddRow(new string[] {
                            "b06f886f-d6d6-4d6b-ae4c-66879e298673",
                            "CoolProduct",
                            "Coolest product ever created",
                            "9.99",
                            "1"});
                table1.AddRow(new string[] {
                            "f0d8cb44-17fa-410d-9eb9-c092ae8ecf32",
                            "SecondCoolProduct",
                            "Second Coolest product ever created",
                            "30",
                            "0"});
                table1.AddRow(new string[] {
                            "fad592d0-e1c4-4a87-81e0-e60839ca2665",
                            "ThirdCoolProduct",
                            "Third Coolest product ever created",
                            "2.3",
                            "4"});
                table1.AddRow(new string[] {
                            "c2ab5934-4e6a-453d-845b-2c3af481d7cd",
                            "ForthCoolProduct",
                            "Forth Coolest product ever created",
                            "3.2",
                            "0"});
#line 6
 testRunner.Given("Database contains products :", ((string)(null)), table1, "Given ");
#line hidden
#line 12
 testRunner.When("A call is made to \'/ProductsWithStock\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "productId",
                            "name",
                            "description",
                            "price",
                            "stock"});
                table2.AddRow(new string[] {
                            "b06f886f-d6d6-4d6b-ae4c-66879e298673",
                            "CoolProduct",
                            "Coolest product ever created",
                            "9.99",
                            "1"});
                table2.AddRow(new string[] {
                            "fad592d0-e1c4-4a87-81e0-e60839ca2665",
                            "ThirdCoolProduct",
                            "Third Coolest product ever created",
                            "2.3",
                            "4"});
#line 13
 testRunner.Then("The Result Should be :", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SecondScenarioFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SecondScenarioFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
